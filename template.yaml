AWSTemplateFormatVersion: 2010-09-09
Description: Lambda + Api Gateway

Parameters:
  projectName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project
  bucketName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project-bucket-lambda-code
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev

Resources:
  #Lambda
  ## Bucket com código
  bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref bucketName

  ## IAM role
  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ## Função
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      FunctionName: !Sub ${projectName}
      Handler: index.handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.9
      Environment:
        Variables: 
          PROJECT_NAME: !Ref projectName

  ## Logs
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${projectName}
      RetentionInDays: 90

  # Api Gateway
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref projectName

  ## Methods
  RootMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  ## Deployment
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RootMethodGet
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  ## Lambda permissions
  lambdaInvokeUsersGet:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/GET/
